apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "todoapp.fullname" . }}-postgres
  labels:
    {{- include "todoapp.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
spec:
  replicas: {{ .Values.replicaCount.postgres }}
  selector:
    matchLabels:
      {{- include "todoapp.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: postgres
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "todoapp.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: postgres
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: postgres
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.postgres.repository }}:{{ .Values.image.postgres.tag }}"
          imagePullPolicy: {{ .Values.image.postgres.pullPolicy }}
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          envFrom:
            - configMapRef:
                name: {{ include "todoapp.fullname" . }}-postgres-config
            - secretRef:
                name: {{ include "todoapp.fullname" . }}-postgres-secret
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - {{ .Values.postgresql.username }}
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - {{ .Values.postgresql.username }}
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources.postgres | nindent 12 }}
          {{- if .Values.persistence.enabled }}
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: postgres-init
              mountPath: /docker-entrypoint-initdb.d
          {{- else }}
          volumeMounts:
            - name: postgres-init
              mountPath: /docker-entrypoint-initdb.d
          {{- end }}
      volumes:
        {{- if .Values.persistence.enabled }}
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: {{ include "todoapp.fullname" . }}-postgres-pvc
        {{- end }}
        - name: postgres-init
          configMap:
            name: {{ include "todoapp.fullname" . }}-postgres-init
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}